/// @file   tmm.syntax.h
/// @brief  contains structures representing the abstract syntax tree (AST) nodes
///         generated by the parser.

#pragma once
#include <tmm.token.h>

/* Constants ******************************************************************/

#define TMM_LITERAL_STRLEN          256
#define TMM_SYNTAX_BODY_CAPACITY    32

/* Syntax Node Type Enumeration ***********************************************/

typedef enum tmm_syntax_type
{

    // Block Node
    TMM_SYNTAX_BLOCK,

    // Directive Nodes
    TMM_SYNTAX_DIRECTIVE_ORG,
    TMM_SYNTAX_DIRECTIVE_INCLUDE,
    TMM_SYNTAX_DIRECTIVE_INCBIN,
    TMM_SYNTAX_DIRECTIVE_DEFINE,
    TMM_SYNTAX_DIRECTIVE_UNDEF,
    TMM_SYNTAX_DIRECTIVE_IF,
    TMM_SYNTAX_DIRECTIVE_ELSE,
    TMM_SYNTAX_DIRECTIVE_ENDIF,
    TMM_SYNTAX_DIRECTIVE_BYTE,
    TMM_SYNTAX_DIRECTIVE_WORD,
    TMM_SYNTAX_DIRECTIVE_LONG,

    // Statement Nodes
    TMM_SYNTAX_STATEMENT_LABEL,
    TMM_SYNTAX_STATEMENT_INSTRUCTION,

    // Complex Expression Nodes
    TMM_SYNTAX_EXPRESSION_BINARY,
    TMM_SYNTAX_EXPRESSION_UNARY,
    TMM_SYNTAX_EXPRESSION_TERNARY,
    TMM_SYNTAX_EXPRESSION_IDENTIFIER,
    TMM_SYNTAX_EXPRESSION_POINTER,

    // Simple Expression Nodes
    TMM_SYNTAX_EXPRESSION_REGISTER_LITERAL,
    TMM_SYNTAX_EXPRESSION_CONDITION_LITERAL,
    TMM_SYNTAX_EXPRESSION_NUMERIC_LITERAL,
    TMM_SYNTAX_EXPRESSION_STRING_LITERAL,
    TMM_SYNTAX_EXPRESSION_PLACEHOLDER_LITERAL,

} tmm_syntax_type_t;

/* Syntax Node Base Structure *************************************************/

/**
 * @brief Represents a node in the abstract syntax tree (AST).
 */
typedef struct tmm_syntax
{
    tmm_syntax_type_t   m_type;     ///< Node type.
    tmm_token_t         m_token;    ///< Token associated with the node.
} tmm_syntax_t;

/* Syntax Body Structure ******************************************************/

typedef struct tmm_syntax_body
{
    tmm_syntax_t**  m_nodes;    ///< Array of syntax nodes.
    size_t          m_count;    ///< Number of syntax nodes.
    size_t          m_capacity; ///< Capacity of syntax node array.
} tmm_syntax_body_t;

/* Syntax Block Structure *****************************************************/

typedef struct tmm_syntax_block
{
    tmm_syntax_type_t   m_type;     ///< Node type.
    tmm_token_t         m_token;    ///< Token associated with the node.
    tmm_syntax_body_t   m_body;     ///< Block body.
} tmm_syntax_block_t;

/* Syntax Directive Structures ************************************************/

typedef struct tmm_syntax_directive_org
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_expression;   ///< Origin expression.
} tmm_syntax_directive_org_t;

typedef struct tmm_syntax_directive_include
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_expression;   ///< Include expression.
} tmm_syntax_directive_include_t;

typedef struct tmm_syntax_directive_incbin
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_expression;   ///< Include binary expression.
    tmm_syntax_t*       m_offset;       ///< Include binary offset expression.
    tmm_syntax_t*       m_length;       ///< Include binary length expression.
} tmm_syntax_directive_incbin_t;

typedef struct tmm_syntax_directive_define
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_identifier;   ///< Macro identifier.
    tmm_syntax_t*       m_statement;    ///< Macro statement.
} tmm_syntax_directive_define_t;

typedef struct tmm_syntax_directive_undef
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_identifier;   ///< Macro identifier.
} tmm_syntax_directive_undef_t;

typedef struct tmm_syntax_directive_if
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_expression;   ///< Conditional expression.
} tmm_syntax_directive_if_t;

typedef struct tmm_syntax_directive_else
{
    tmm_syntax_type_t   m_type;     ///< Node type.
    tmm_token_t         m_token;    ///< Token associated with the node.
} tmm_syntax_directive_else_t;

typedef struct tmm_syntax_directive_endif
{
    tmm_syntax_type_t   m_type;     ///< Node type.
    tmm_token_t         m_token;    ///< Token associated with the node.
} tmm_syntax_directive_endif_t;

typedef struct tmm_syntax_directive_byte
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_body_t   m_body;         ///< List of byte or string expressions.
} tmm_syntax_directive_byte_t;

typedef struct tmm_syntax_directive_word
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_body_t   m_body;         ///< List of word expressions.
} tmm_syntax_directive_word_t;

typedef struct tmm_syntax_directive_long
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_body_t   m_body;         ///< List of long expressions.
} tmm_syntax_directive_long_t;

/* Syntax Statement Structures ************************************************/

typedef struct tmm_syntax_statement_label
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_identifier;   ///< Label identifier expression.
} tmm_syntax_statement_label_t;

typedef struct tmm_syntax_statement_instruction
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    enum_t              m_mnemonic;     ///< Instruction mnemonic.
    tmm_syntax_body_t   m_operands;     ///< List of instruction operands.
} tmm_syntax_statement_instruction_t;

/* Syntax Expression Structures ***********************************************/

typedef struct tmm_syntax_expression_binary
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_token_type_t    m_operator;     ///< Binary operator.
    tmm_syntax_t*       m_left;         ///< Left operand.
    tmm_syntax_t*       m_right;        ///< Right operand.
} tmm_syntax_expression_binary_t;

typedef struct tmm_syntax_expression_unary
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_token_type_t    m_operator;     ///< Unary operator.
    tmm_syntax_t*       m_operand;      ///< Operand.
} tmm_syntax_expression_unary_t;

typedef struct tmm_syntax_expression_ternary
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_condition;    ///< Condition expression.
    tmm_syntax_t*       m_true;         ///< True expression.
    tmm_syntax_t*       m_false;        ///< False expression.
} tmm_syntax_expression_ternary_t;

typedef struct tmm_syntax_expression_identifier
{
    tmm_syntax_type_t   m_type;                         ///< Node type.
    tmm_token_t         m_token;                        ///< Token associated with the node.
    char                m_symbol[TMM_LITERAL_STRLEN];   ///< Identifier symbol.
} tmm_syntax_expression_identifier_t;

typedef struct tmm_syntax_expression_pointer
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    tmm_syntax_t*       m_expression;   ///< Pointer expression.
} tmm_syntax_expression_pointer_t;

typedef struct tmm_syntax_expression_register_literal
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    enum_t              m_register;     ///< Register token.
} tmm_syntax_expression_register_literal_t;

typedef struct tmm_syntax_expression_condition_literal
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    enum_t              m_condition;    ///< Condition token.
} tmm_syntax_expression_condition_literal_t;

typedef struct tmm_syntax_expression_numeric_literal
{
    tmm_syntax_type_t   m_type;         ///< Node type.
    tmm_token_t         m_token;        ///< Token associated with the node.
    double              m_value;        ///< Numeric value.
} tmm_syntax_expression_numeric_literal_t;

typedef struct tmm_syntax_expression_string_literal
{
    tmm_syntax_type_t   m_type;                         ///< Node type.
    tmm_token_t         m_token;                        ///< Token associated with the node.
    char                m_value[TMM_LITERAL_STRLEN];    ///< String value.
} tmm_syntax_expression_string_literal_t;

typedef struct tmm_syntax_expression_placeholder_literal
{
    tmm_syntax_type_t   m_type;                         ///< Node type.
    tmm_token_t         m_token;                        ///< Token associated with the node.
    uint32_t            m_index;                        ///< Placeholder index.
} tmm_syntax_expression_placeholder_literal_t;

/* Public Functions ***********************************************************/

tmm_syntax_t* tmm_create_syntax (tmm_syntax_type_t p_type, const tmm_token_t* p_token);
void tmm_destroy_syntax (tmm_syntax_t* p_syntax);
void tmm_push_syntax (tmm_syntax_body_t* p_body, tmm_syntax_t* p_syntax);
